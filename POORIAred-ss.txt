vmess://eyJ2IjogIjIiLCAicHMiOiAiXHUyNzA1IFBPT1JJQXJlZC1TUyAoMjAgQ29uZmlncykiLCAiYWRkIjogIjEyNy4wLjAuMSIsICJwb3J0IjogMTA4MCwgImlkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsICJhaWQiOiAwLCAibmV0IjogInRjcCIsICJ0eXBlIjogImh0dHAiLCAiaG9zdCI6ICIiLCAicGF0aCI6ICIvIiwgInRscyI6ICIiLCAic25pIjogIiJ9
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTozNjBlMjFkMjE5NzdkYzEx@103.111.114.92:57456#POORIAred-%D9%81%D8%B1%D8%B2%D8%A7%D8%AF-%D8%A7%D9%86%D8%B5%D8%A7%D8%B1%DB%8C%E2%80%8C%D9%81%D8%B1
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@102.207.216.176:990#POORIAred-%D8%B9%D9%84%DB%8C-%D9%82%DB%8C%D8%B5%D8%B1%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@109.61.39.28:990#POORIAred-%D8%B9%D9%84%DB%8C-%D8%B1%D9%88%D8%B2%D8%A8%D9%87%D8%A7%D9%86%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@109.61.46.43:990#POORIAred-%D8%AC%D8%A7%D8%A8%D8%B1-%D8%B4%DB%8C%D8%B1%D9%88%D8%B2%D9%87%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@138.186.142.80:990#POORIAred-%D8%A2%D8%B1%D8%B4%DB%8C%D8%A7-%D8%A7%D9%85%D8%A7%D9%85%D9%82%D9%84%DB%8C%E2%80%8C%D8%B2%D8%A7%D8%AF%D9%87
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@154.70.207.97:990#POORIAred-%D8%B3%DB%8C%D8%A7%D9%88%D8%B4-%D9%85%D8%AD%D9%85%D9%88%D8%AF%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@156.38.168.58:990#POORIAred-%D9%85%D8%AD%D9%85%D8%AF-%D8%AD%D8%A7%D8%AC%DB%8C%E2%80%8C%D8%B1%D8%B3%D9%88%D9%84%E2%80%8C%D9%BE%D9%88%D8%B1
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@197.140.29.76:990#POORIAred-%D8%A7%D9%85%DB%8C%D8%AF-%D8%AD%D8%B3%D9%86%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@212.102.54.45:990#POORIAred-%D8%B5%D8%AF%D8%B1%D8%A7%D9%84%D8%AF%DB%8C%D9%86-%D9%84%DB%8C%D8%AA%D8%A7%D9%86%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@38.54.59.180:990#POORIAred-%D8%A7%D8%A8%D9%88%D8%A7%D9%84%D9%81%D8%B6%D9%84-%D8%A2%D8%AF%DB%8C%D9%86%D9%87%E2%80%8C%D8%B2%D8%A7%D8%AF%D9%87
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@45.159.250.190:990#POORIAred-%D9%85%D8%AD%D9%85%D8%AF%D8%AD%D8%B3%D9%86-%D8%AA%D8%B1%DA%A9%D9%85%D8%A7%D9%86
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@46.183.217.204:990#POORIAred-%D9%85%DB%8C%D9%84%D8%A7%D8%AF-%D9%85%D8%AD%D8%A8%D9%88%D8%A8%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ==@94.156.250.122:990#POORIAred-%D8%A2%DB%8C%D8%AF%D8%A7-%D8%B1%D8%B3%D8%AA%D9%85%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ@103.106.228.247:990#POORIAred-%D8%A7%D9%85%DB%8C%D8%B1%D8%AD%D8%B3%DB%8C%D9%86-%D8%B4%D9%85%D8%B3
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ@188.214.157.58:990#POORIAred-%D8%B1%D8%B6%D8%A7-%D9%85%D8%B9%D8%B8%D9%85%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpBUmd2R1p5d0ErZ2FjZ0dWMjZCdm11MDUrd1ptUlcvaitBZFUrWjhCdDQ0PQ@193.135.174.135:990#POORIAred-%D9%85%D9%87%D8%AF%DB%8C-%D8%AD%D8%B6%D8%B1%D8%AA%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpjNDA2NDFjMWY4OWU3YWNi@de.vpnsparta.pro:57456#POORIAred-%D9%85%D8%AD%D9%85%D9%88%D8%AF-%D8%A7%D8%AD%D9%85%D8%AF%DB%8C
ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTprMXY1ZzlGZWZkb08=@57.129.140.88:8388#POORIAred-%D9%85%DB%8C%D9%84%D8%A7%D8%AF-%D8%B3%D8%B9%DB%8C%D8%AF%DB%8C%D8%A7%D9%86%E2%80%8C%D8%AC%D9%88
ss://YWVzLTI1Ni1nY206ZGFkYTA4MDE=@3.107.178.116:80#POORIAred-%D9%87%D9%88%D9%85%D9%86-%D8%B9%D8%A8%D8%AF%D8%A7%D9%84%D9%84%D9%87%DB%8C
ss://YWVzLTI1Ni1nY206ZGFkYTA4MDE=@3.107.184.53:80#POORIAred-%D8%AD%D9%85%DB%8C%D8%AF%D8%B1%D8%B6%D8%A7-%D8%B1%D9%88%D8%AD%DB%8C